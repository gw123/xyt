<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "article".
 *
 * @property string $id
 * @property string $title
 * @property string $categoryId
 * @property string $tagIds
 * @property string $source
 * @property string $sourceUrl
 * @property string $publishedTime
 * @property string $body
 * @property string $thumb
 * @property string $originalThumb
 * @property string $picture
 * @property string $status
 * @property string $hits
 * @property integer $featured
 * @property integer $promoted
 * @property integer $sticky
 * @property string $postNum
 * @property string $upsNum
 * @property string $userId
 * @property string $createdTime
 * @property string $updatedTime
 * @property string $orgId
 * @property string $orgCode
 * @property string $category
 * @property string $chapter
 * @property string $point
 */
class Article extends \yii\db\ActiveRecord
{
    const  published = 'published';
    const  unpublished = 'unpublished';
    const  trash = 'trash';

    const  pass = 'pass';
    const  onpass = 'onpass';
    const  notpass = 'notpass';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category','title' ,'body'], 'required'],
            [['categoryId', 'publishedTime', 'pv', 'featured', 'promoted', 'sticky',
                'postNum', 'upsNum', 'userId', 'createdTime', 'updatedTime'], 'integer'],
            [['tagIds', 'body','markdown'], 'string'],
            [['title', 'thumb', 'originalThumb', 'picture' ,'editor_type'], 'string', 'max' => 255],
            [['source', 'sourceUrl'], 'string', 'max' => 1024],
            [['category', 'chapter', 'point'], 'string', 'max' => 548],

            [[ 'status'] ,'in','range'=>['published','unpublished','trash'] ],
            [[ 'auditStatus'] ,'in','range'=>['pass','nopass','onpass'] ],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => '文章标题',
            'categoryId' => '栏目',
            'tagIds' => 'tag标签',
            'source' => '来源',
            'sourceUrl' => '来源URL',
            'publishedTime' => '发布时间',
            'body' => '正文',
            'thumb' => '缩略图',
            'originalThumb' => '缩略图原图',
            'picture' => '封面图',
            'status' => '状态',
            'pv' => '点击量',
            'featured' => '是否头条',
            'promoted' => '推荐',
            'sticky' => '是否置顶',
            'postNum' => '回复数',
            'upsNum' => '点赞数',
            'userId' => '发布人',
            'createdTime' => '创建时间',
            'updatedTime' => '更新时间',
            'orgId' => 'Org ID',
            'orgCode' => '组织机构内部编码',
            'category' => '目录',
            'chapter' => '章节',
            'point' => '知识点',
            'markdown'=>'markdown文本'
        ];
    }

    public  function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['create'] = ['title','source','body','originalThumb','picture' ,'status' ,'promoted','createdTime','publishedTime','userId','category','chapter','point'];
        //$scenarios['update'] = ['id','email','nickname','auth_key','password_hash','password_reset_token' ];

        return $scenarios;
    }

    /**
     * @inheritdoc
     * @return ArticleQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ArticleQuery(get_called_class());
    }
}
