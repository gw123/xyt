<?php
namespace  common\models;

use Yii;
use yii\db\ActiveRecord;
use common\models\PostQuery;

class   Post  extends  ActiveRecord
{
    public  $error;

    public  static  function  tableName()
    {
        return  'post';
    }

    public  function  rules()
    {
        return [
                [['id','uid', 'status','type'],'integer' , 'message'=>'非法数据'] ,
                [['tag','chapter','title'] ,'string','max'=>128 , 'message'=>'标签太长'],
                [['content'] , 'string', 'max'=>2000, 'message'=>'内容超过2000字符'],
        ];
    }


    public function beforeSave($insert)
    {
        $this->uid =  Yii::$app->user->id;
        $this->status = 1;
        $this->create_time = time();
        $this->content =  Yii::$app->request->post('data')['content'] ;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function insertPost($param)
    {
        $res = Yii::$app->db->createCommand()->insert('post',$param)->execute();
        if($res===false)
        {
            $this->error = "插入数据失败";
            return false;
        }
        $insertId = Yii::$app->db->getLastInsertID();
        return $insertId;
    }

    public  function  updatePost($param)
    {
        $id = $param['id'];
        unset($param['id']);
        $res = Yii::$app->db->createCommand()->update('post',$param,['id'=>$id])->execute();
        if($res===false)
        {
            $this->error = '更新数据失败';
            return false;
        }
        return $id;
    }

    public static function  find()
    {
        return new PostQuery(get_called_class());// TODO: Change the autogenerated stub
    }

//    public function  getPostList($param)
//    {
//        isset($param['pagesize'] ) ? $pagesize = intval($param['pagesize']):$pagesize=10;
//        isset($param['page']) ? $page = intval($param['page']):$page=1;
//
//        if(isset($param['node_id']))  {
//            if(!empty($param['node_id']))
//            $condition['node_id']=$param['node_id'];
//        }
//
//        $condition['status'] = 1;
//        $data= $this->find()->where($condition)->limit($pagesize)->offset( ($page-1)*$pagesize )->asArray()->all();
//        $total = $this->find()->where($condition)->count();
//        $param['currentPage']= $page;
//        $param['total']    = $total;
//        $param['pagesize'] =$pagesize;
//        return ['data'=>$data , 'param'=>$param];
//
//    }

    public function  getPostListByTag($param)
    {
        if(empty($param)){
            $param = \Yii::$app->request->get();
        }
        isset($param['pagesize'] ) ? $pagesize = intval($param['pagesize']):$pagesize=10;
        isset($param['page']) ? $page = intval($param['page']):$page=1;

        //var_dump($param);
        $query = self::find();
        $query->from('post');
        if(isset($param['tag']))
            $query->andWhere(" tag in ({$param['tag']}) ");
        if(isset($param['node_id']))
            $query->andWhere(['node_id'=>intval($param['node_id'])]);
        if(isset($param['chapter']))
            $query->andWhere("chapter in ({$param['chapter']})");

        $query->limit($pagesize); //($page-1)*$pagesize

        $sql= $query->createCommand()->getRawSql();
        //echo $sql."<br>";
        $data= \Yii::$app->sphinx->createCommand($sql)->queryAll();
        // var_dump($data); exit();

        $condition['status'] = 1;
        $total = $this->find()->where($condition)->count();
        $param['currentPage']= $page;
        $param['total']    = $total;
        $param['pagesize'] =$pagesize;
        return ['data'=>$data , 'param'=>$param];


    }



}