<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "chapter".
 *
 * @property integer $id
 * @property integer $root
 * @property integer $lvl
 * @property integer $categoryId
 * @property integer $parentId
 * @property string $parents
 * @property string $title
 * @property integer $cover
 * @property integer $status
 * @property integer $order
 * @property string $desc
 * @property string $category
 * @property string $bookId
 * @property string $pdfpages
 */
class Chapter extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'chapter';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['root'], 'required'],
            [['id','root', 'lvl', 'categoryId', 'parentId', 'status', 'order'], 'integer'],
            [['parents', 'title', 'desc', 'cover','pdfpages'], 'string', 'max' => 256],
            [['category'], 'string', 'max' => 48],
        ];
    }

    public  function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['update'] = ['root', 'lvl', 'categoryId', 'parentId', 'status', 'order' ,'parents', 'title', 'desc', 'cover','category'];
        //$scenarios['update'] = ['id','email','nickname','auth_key','password_hash','password_reset_token' ];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'root' => '根',
            'lvl' => '层级',
            'categoryId' => '目录id',
            'parentId' => '父级',
            'parents' => '祖辈',
            'title' => '标题',
            'cover' => '封面',
            'status' => '状态',
            'order' => '排序',
            'desc' => '描述',
            'category' => '目录',
            'pdfpages'=>'页码'
        ];
    }

    /**
     * @inheritdoc
     * @return ChapterQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ChapterQuery(get_called_class());
    }

    /***
     * 获取一个字符串的最后一个id 对应的章节名称
     * @param $chapterStr
     * @return mixed|string
     */
    public  static function   getLastChapterName($chapterStr)
    {
        $ids = explode(',' , $chapterStr);
        $id =array_pop($ids);
        if( !intval($id) )  return '选择章节';
        //echo $id;
        $chapterMap = ChapterSearch::getChapterMap();

        return isset($chapterMap[$id]) ? $chapterMap[$id] : '--';
    }



    /***
     * 获取顶层章节  id  , title
     * @return array|
     */
    public static  function getLvl1Chapter()
    {
        $arr = self::find()->select('id , title as text')->
        where( ['lvl'=>1 , 'status'=>1] )->
        asArray()->all();
        return $arr ;
    }



    /***
     * 获取父章节下面的子章节
     * @param $chapterid
     * @param int $treeid
     * @return bool
     */
    public  static  function  getChaptersByParent($parentid)
    {
        $arr = self::find()->select('id , title as text')->
        where( ['parentid'=>$parentid , 'status'=>1] )->
        asArray()->all();
        return $arr ;
    }



}
